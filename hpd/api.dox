/*
 * Copyright 2011 Aalborg University. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Aalborg University ''AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Aalborg University OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 */

/*! \page api.dox HomePort API Specification
 *
 * \tableofcontents
 *
 * \section sec_api_internal_arch Internal architecture
 *
 * - Data Model:
 *     - model.h
 * - Communication Model:
 *     - comm.h
 * - Daemon Service:
 *     - daemon.c
 *     - daemon.h
 *     - daemon_api.c
 * - Discovery Service:
 *     - discovery.c
 *     - discovery.h
 *     - discovery_api.c
 *     - discovery_id.c
 * - Event Dispatch Service:
 *     - event.c
 *     - event.h
 *     - event_api.c
 * - Log Dispatch Service:
 *     - log.c
 *     - log.h
 *     - log_api.c
 * - Request Dispatch Service:
 *     - request.c
 *     - request.h
 *     - request_api.c
 * - Value Service:
 *     - value.c
 *     - value.h
 *     - value_api.c
 *
 * \section sec_api_data_mode HomePort data model
 *
 * The internal class diagram for reference, most but not all types are available to the outside through references
 * (direct access to members are generally not possible):
 *
 * @startuml "Class diagram (Probably outdated)"
 * hide empty methods
 *
 * package "hpd_types.h" {
 *     class hpd_module_def_t {
 *         hpd_create_f on_create
 *         hpd_destroy_f on_destroy
 *         hpd_start_f on_start
 *         hpd_stop_f on_stop
 *         hpd_parse_opt_f on_parse_opt
 *     }
 * }
 *
 * package "comm.h" {
 *     class hpd_listener_t {
 *         hpd_t *hpd
 *         hpd_value_f on_change
 *         hpd_device_f on_attach
 *         hpd_device_f on_detach
 *         void *data
 *         hpd_free_f on_free
 *     }
 *     
 *     class hpd_request_t {
 *         hpd_service_id_t *service
 *         hpd_method_t method
 *         hpd_response_f on_response
 *         hpd_free_f on_free
 *         void *data
 *     }
 *     
 *     class hpd_response_t {
 *         hpd_status_t status
 *     }
 *     
 *     class hpd_value_t {
 *         hpd_map_t *headers
 *         char *body
 *         size_t len
 *     }
 * }
 * 
 * package "daemon.h" {
 *     class hpd_t {
 *         hpd_ev_loop_t *loop
 *         ev_signal sigint_watcher
 *         ev_signal sigterm_watcher
 *         int module_options_count
 *         int options_count
 *         hpd_argp_option_t *options
 *         hpd_module_t **option2module
 *         hpd_ev_asyncs_t request_watchers
 *         hpd_ev_asyncs_t respond_watchers
 *         hpd_ev_asyncs_t changed_watchers
 *         hpd_ev_asyncs_t attached_watchers
 *         hpd_ev_asyncs_t detached_watchers
 *         char *argv0;
 *     }
 *     
 *     class hpd_ev_async_t {
 *         ev_async watcher
 *         hpd_request_t *request
 *         hpd_response_t *response
 *         hpd_t *hpd
 *         hpd_service_id_t *service
 *         hpd_value_t *value
 *         hpd_device_id_t *device
 *     }
 *     
 *     class hpd_module_t {
 *         char *id
 *         void *data
 *     }
 * }
 * 
 * package "discovery.h" {
 *     class hpd_adapter_id_t {
 *         hpd_t *hpd
 *         char *aid
 *     } 
 *     
 *     class hpd_device_id_t {
 *         char *did
 *     } 
 *     
 *     class hpd_service_id_t {
 *         char *sid
 *     } 
 *     
 *     class hpd_parameter_id_t {
 *         char *pid
 *     } 
 * }
 * 
 * package "model.h" {
 *     class hpd_action_t {
 *         hpd_method_t method
 *         hpd_action_f action
 *     }
 *     
 *     class hpd_configuration_t {
 *     }
 *     
 *     class hpd_adapter_t {
 *         char *id
 *         hpd_map_t *attributes
 *         hpd_free_f on_free
 *         void *data
 *     }
 *     
 *     class hpd_device_t {
 *         char *id
 *         hpd_map_t *attributes
 *         hpd_free_f on_free
 *         void *data
 *     }
 *     
 *     class hpd_service_t {
 *         char *id
 *         hpd_map_t *attributes
 *         hpd_free_f on_free
 *         void *data
 *     }
 *     
 *     class hpd_parameter_t {
 *         char *id
 *         hpd_map_t *attributes
 *     }
 *
 *     hpd_adapter_id_t <|-- hpd_device_id_t
 *     hpd_device_id_t <|-- hpd_service_id_t
 *     hpd_service_id_t <|-- hpd_parameter_id_t
 *     hpd_request_t "1" <- "-" hpd_response_t
 *     hpd_response_t "-" *-- "1" hpd_value_t
 *     hpd_request_t "-" *-- "1" hpd_value_t
 *     hpd_t "1" *-- "1" hpd_configuration_t
 *     hpd_t "1" *- "*" hpd_module_t
 *     hpd_module_t "-" *- "1" hpd_module_def_t
 *     hpd_action_t "*" -* "1" hpd_service_t
 *     hpd_configuration_t "1" *-- "*" hpd_adapter_t
 *     hpd_adapter_t "1" *-- "*" hpd_device_t
 *     hpd_device_t "1" *-- "*" hpd_service_t
 *     hpd_service_t "1" *-- "*" hpd_parameter_t
 *     hpd_configuration_t "-" *- "*" hpd_listener_t
 * }
 *
 * @enduml
 *
 * \subsection sec_api_error_handling Enumerations for error handling
 *
 * All functions in the API returns hpd_err_t, which is:
 * \todo Should really reconsider whether to have errors on free functions - really difficult to handle (there's a reason you're not suppose to throw in destructors!)
 *
 * \snippet include/hpd/hpd_types.h hpd_error_t
 *
 * For the request-response relationships HomePort continues to use HTTP status codes to describe errors, as many
 * modules relies on HTTP connections. From the HTTP protocol, these are:
 *
 * \snippet include/hpd/hpd_types.h hpd_status_t
 *
 * \subsection sec_api_attrs Attribute default keys
 *
 * The entities in the data model are described using attributes. These are flexible key-value pairs, where the keys can
 * be chosen freely. However, we do define the following default keys for consistencies between modules:
 * \todo As with default keys, we could add default values as well; Type = Temperature, Unit = C, etc. Seluxit and Zigbee can be used for inspiration (Rene’s work).
 *
 * \snippet include/hpd/hpd_types.h Default keys
 *
 * \subsection sec_api_methods Method and Port enumeration
 *
 * Services have a set of actions, currently for get and put only, but these are define in a enumeration, thus can
 * easily be expanded later:
 *
 * \snippet include/hpd/hpd_types.h hpd_method_t
 *
 * \subsection sec_api_custom_data Custom user data and free functions
 *
 * HomePort's data model allow module developers to store custom pointers to user data of their own choice. HomePort
 * will not touch this data. To allow memory management of custom data pointers, HomePort generally take a on_free
 * callback function with the data pointer. This function will be called when HomePort is free'ing the object and can be
 * used by the module developer to ensure that the custom data is free'd as well. The function pointer can be NULL, if
 * it is not necessary to free the data.
 *
 * \snippet include/hpd/hpd_types.h hpd_free_f
 *
 * \section sec_api_main Daemon API
 *
 * \snippet include/hpd/hpd_daemon_api.h hpd_t functions
 *
 * First, the main program allocates memory for HomePort (hpd_t) with hpd_alloc(). Then it tells HomePort of all
 * modules that it wishes to include with hpd_module(). We shall use the term module for both adapters and applications.
 * All modules are assigned a unique id by the main program, which allows running multiple instances of the same module.
 * module_def is a public structure, of which each module should provide an instance (explained below).
 *
 * @startuml "Main program"
 *
 * participant "main()" as Main
 * participant Daemon
 * entity hpd_t
 *
 * [->Main
 * activate Main
 * Main -> Daemon: hpd_alloc()
 * activate Daemon
 * Daemon -> hpd_t: alloc()
 * activate hpd_t
 * Main <-- Daemon
 * deactivate Daemon
 * Main -> Daemon: hpd_module()
 * activate Daemon
 * Main <-- Daemon
 * deactivate Daemon
 * Main -> Daemon: hpd_start()
 * activate Daemon
 * ...Running...
 * [-> Daemon: hpd_stop()
 * activate Daemon
 * [<-- Daemon
 * deactivate Daemon
 * Main <-- Daemon
 * deactivate Daemon
 * Main  -> Daemon: hpd_free()
 * activate Daemon
 * Daemon -> hpd_t: free()
 * destroy hpd_t
 * Main <-- Daemon
 * deactivate Daemon
 * [<-- Main
 * deactivate Main
 * @enduml
 *
 * The main program will then start HomePort with hpd_start(). Note that this function does not return, but will keep
 * running until hpd_stop() is called. hpd_stop() will be called automatically on sigint and sigterm. Finally, the main
 * program will deallocate the memory with hpd_free().
 *
 * Any pointer to hpd_t is valid between calls to hpd_alloc() and hpd_free(), and thus can generally be stored by
 * modules in their entire lifetime.
 *
 * \section sec_api_shared_api Shared API (Adapters and Applications) - Part I
 *
 * \subsection sec_api_modules Modules
 *
 * A module will provide an instance of the module_def structure along with implementations of the five included
 * functions. module_def is a structure where the members are publicly available.
 *
 * \snippet include/hpd/hpd_types.h hpd_module_def_t
 *
 * The five functions:
 * \snippet include/hpd/hpd_types.h hpd_module_def_t functions
 *
 * In here, on_create and on_destroy are used to allocate/deallocate globally available memory in data, which can be
 * used freely. on_start and on_stop are used to initialise/stop the underlying connection and add watchers to the event
 * loop – whatever is required for the module to be considered running. To handle program argument given to the
 * executable, a module can also define on_parse_opt, which may be called between on_create and on_start due to
 * arguments given to the executable.
 *
 * @startuml "Module functions and object lifetime"
 *
 * participant Daemon
 * participant Module
 * entity hpd_module_t
 * entity hpd_loop_t
 *
 * [-> Daemon: hpd_alloc()
 * activate Daemon
 * [<-- Daemon
 * deactivate Daemon
 * [-> Daemon: hpd_module()
 * activate Daemon
 * Daemon -> hpd_module_t: alloc()
 * activate hpd_module_t
 * [<-- Daemon
 * deactivate Daemon
 * [-> Daemon: hpd_start()
 * activate Daemon
 * Daemon -> Module: on_create()
 * activate Module
 * Module -> Daemon: hpd_module_get_id()
 * activate Daemon
 * Module <-- Daemon
 * deactivate Daemon
 * Module -> Daemon: hpd_module_add_option()
 * activate Daemon
 * Module <-- Daemon
 * deactivate Daemon
 * Daemon <-- Module
 * deactivate Module
 * Daemon -> Module: on_parse_opt()
 * activate Module
 * Daemon <-- Module
 * deactivate Module
 * Daemon -> hpd_loop_t: ev_loop_new()
 * activate hpd_loop_t
 * Daemon -> Module: on_start()
 * activate Module
 * Module -> Daemon: hpd_get_loop()
 * activate Daemon
 * Module <-- Daemon
 * deactivate Daemon
 * Daemon <-- Module
 * deactivate Module
 * ...Running...
 * [-> Daemon: hpd_stop()
 * activate Daemon
 * [<-- Daemon
 * deactivate Daemon
 * Daemon -> Module: on_stop()
 * activate Module
 * Daemon <-- Module
 * deactivate Module
 * Daemon -> hpd_loop_t: ev_loop_destroy()
 * destroy hpd_loop_t
 * Daemon -> Module: on_destroy()
 * activate Module
 * Daemon <-- Module
 * deactivate Module
 * [<-- Daemon
 * deactivate Daemon
 * [-> Daemon: hpd_free()
 * activate Daemon
 * Daemon -> hpd_module_t: free()
 * destroy hpd_module_t
 * [<-- Daemon
 * deactivate Daemon
 * @enduml
 *
 * The following three functions are shared between adapters and applications:
 * \snippet include/hpd/hpd_shared_api.h hpd_t functions
 *
 * For arguments to work, the module will have to add any options using hpd_module_add_option() during on_create.
 * Options will be named --id-name, where id is the module identifier, as given by the main program. The module can call
 * hpd_module_get_id() to obtain this id. During on_start and afterwards, the event loop will be accessible through
 * hpd_get_loop(). On here, the module can put io-watchers, timer-watchers, and more to trigger on events.
 *
 * A module can rely on the pointer to its hpd_module_t (as given in on_create()) will be valid for its entire lifetime,
 * that is between calls to on_create and on_destroy. The pointer to its id (as obtained with hpd_module_get_id()) is
 * valid in the same interval. The pointer to the event loop (as obtained with hpd_get_loop()) is valid between calls to
 * on_start and on_stop.
 *
 * \subsection sec_api_logging Logging
 *
 * \snippet include/hpd/hpd_types.h hpd_log_level_t
 *
 * \snippet include/hpd/hpd_shared_api.h log functions
 *
 * \subsection sec_api_indirect_refs Indirect references
 *
 * Through the following sections we shall utilise indirect references to objects in the data mode (adapters, devices,
 * services, parameters). These prevent module developers from keeping pointers to objects that eventually will be
 * free'd, thus making these pointers invalid. To allocate and free these references:
 *
 * \snippet include/hpd/hpd_shared_api.h id_t functions
 *
 * If a module developers explicitly call *_id_alloc(), they are also responsible for calling *_id_free().
 *
 * \section sec_api_adapter_api Adapter API
 *
 * The functions in the Adapter API are only available for adapters.
 *
 * \subsection sec_api_hpd_adapter_t Adapter structure (hpd_adapter_t)
 *
 * To maintain adapter structures in the data model:
 * \todo Maybe change name of the structure from “adapter” to “network” to highlight the differences between modules and adapters. A module can make multiple networks of devices.
 *
 * \snippet include/hpd/hpd_adapter_api.h hpd_adapter_t functions
 *
 * alloc/free are used to manage memory. attach/detach are used to hand the object to HomePort. If an object is
 * attached, it will be visibly through the navigation functions (shown later) and HomePort will ensure that the memory
 * is managed. For example this means that if an adapter is freed, all devices, services, etc. below it will
 * automatically be freed also. Note that the reverse applies too; if an object is detached, HomePort do not know about
 * it and it is up to the module to manage the memory. set_data/get_data functions can be used, by the adapter, to
 * store custom data within HomePort. If on_free is set, HomePort will call this function to free this custom data,
 * when the object is freed.
 *
 * As to when to use a direct pointer to the adapter and when to use an indirect reference, see the following diagram.
 * hpd_adapter_alloc() allocates the instance of hpd_adapter_t, which is referred to using a pointer - the module
 * developer is in control of the memory. The object is changed (set functions), and finally hpd_adapter_attach() is
 * called. After this call the pointer _will_ be invalid and we can only refer to the object using instances of
 * hpd_adapter_id_t (indirect references) - HomePort manages the memory.
 *
 * @startuml "Lifetime of adapter structures (Outside view, not exact implementation)"
 *
 * participant Module
 * participant Discovery
 * entity hpd_adapter_t
 * entity hpd_adapter_id_t
 *
 * [-> Module
 * activate Module
 *
 * Module -> Discovery: hpd_adapter_alloc()
 * activate Discovery
 * Discovery -> hpd_adapter_t: alloc()
 * activate hpd_adapter_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_set_data()
 * activate Discovery
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_set_attr()
 * activate Discovery
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_set_attrs()
 * activate Discovery
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_attach()
 * activate Discovery
 * Discovery -> hpd_adapter_t: move()
 * destroy hpd_adapter_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * [<-- Module
 * deactivate Module
 *
 * ...
 *
 * [-> Module
 * activate Module
 *
 * Module -> Discovery: hpd_adapter_id_alloc()
 * activate Discovery
 * Discovery -> hpd_adapter_id_t: alloc()
 * activate hpd_adapter_id_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_get_data()
 * activate Discovery
 * Module <-- Discovery
 * deactivate Discovery
 *
 * ...
 *
 * Module -> Discovery: hpd_adapter_detach()
 * activate Discovery
 * Discovery -> hpd_adapter_t: alloc()
 * activate hpd_adapter_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_free()
 * activate Discovery
 * Discovery -> hpd_adapter_t: free()
 * destroy hpd_adapter_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * Module -> Discovery: hpd_adapter_id_free()
 * activate Discovery
 * Discovery -> hpd_adapter_id_t: free()
 * destroy hpd_adapter_id_t
 * Module <-- Discovery
 * deactivate Discovery
 *
 * [<-- Module
 * deactivate Module
 *
 * @enduml
 *
 * After a call to hpd_adapter_detach(), the indirect reference will still be allocated, but will now result in
 * HPD_E_NOT_FOUND, if we try to use it. hpd_adapter_detach() also returns a pointer to hpd_adapter_t -- it is now
 * the responsibility of the module to free the object.
 *
 * \par Implementation details:
 * hpd_adapter_attach() will make a copy of hpd_adapter_t, thus effectively invalidating the pointer.
 * hpd_adapter_detach() will return a pointer to this copy, which was stored in the internal data model.
 *
 * \subsection sec_api_hpd_device_t Device structure (hpd_device_t)
 *
 * Devices are managed in a similar manner:
 * \snippet include/hpd/hpd_adapter_api.h hpd_device_t functions
 *
 * \subsection sec_api_hpd_service_t Service structure (hpd_service_t)
 *
 * Services furthermore allow setting an action, which is a method and a function pointer. Currently only get and put
 * is support, but it could theoretically be expanded to others:
 * \snippet include/hpd/hpd_adapter_api.h hpd_service_t functions
 * \snippet include/hpd/hpd_types.h hpd_action_f
 * \snippet include/hpd/hpd_adapter_api.h hpd_action_t adapter functions
 *
 * \subsection sec_api_hpd_parameter_t Parameter structure (hpd_parameter_t)
 *
 * Finally, functions to manage parameters:
 * \snippet include/hpd/hpd_adapter_api.h hpd_parameter_t functions
 *
 * \section sec_api_shared_api_cont Shared API (Adapters and Applications) - Part II
 *
 * \subsection sec_api_data_model_get Data model getters
 *
 * To get members from the objects, created by an adapter, applications have the following functions:
 * \snippet include/hpd/hpd_shared_api.h hpd_adapter_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_device_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_service_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_parameter_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_action_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_pair_t functions
 *
 * Again, we have defines to ease foreach loops:
 * \snippet include/hpd/hpd_shared_api.h model foreach loops
 *
 * \subsection sec_api_data_model_nav Data model navigation
 *
 * The HomePort data model can be navigated by both adapters and applications, thus only the later will find use for
 * browsing through models created by another module. To do so, the following functions are available:
 * \snippet include/hpd/hpd_shared_api.h Browsing functions
 *
 * In brief: Get functions will navigate upwards in the hierarchy, first functions will get the first object in the list
 * under the given object, next will give the next one.
 *
 * Because first-next function are a bit complicated to use, the following defines are also available to create simple
 * foreach loops (based on the same principle from libev):
 * \snippet include/hpd/hpd_shared_api.h Browsing foreach loops
 *
 * \section sec_api_comm Communication
 *
 * \subsection sec_api_value Shared API - Value structure
 *
 * The value structure is used in both get and put requests and thus is available for both adapters and applications:
 * \snippet include/hpd/hpd_shared_api.h hpd_value_t functions
 * \snippet include/hpd/hpd_shared_api.h hpd_value_t foreach loops
 *
 * The body of a value is the actual value, where the headers are additional attributes, which are currently unused but
 * will be used to indicate time-to-live for caching, but are defined generic so they can easily be expanded without
 * breaking the API. Note it is also possible for adapters and applications to store their own custom headers, similar
 * to the principle in HTTP headers.
 *
 * The len in hpd_value_alloc can be set to HPD_NULL_TERMINATED if body is a \\0 terminated string:
 *
 * \snippet include/hpd/hpd_types.h HPD_NULL_TERMINATED
 *
 * \subsection sec_api_adapter_comm Adapter API - Communication
 *
 * Action functions will need functions related to requests/responses to manage these (functions to manage values are
 * shared with applications and will be shown later):
 * \snippet include/hpd/hpd_adapter_api.h hpd_request_t functions
 * \snippet include/hpd/hpd_adapter_api.h hpd_response_t functions
 *
 * And when, we are considering communication, an adapter should call the following function, whenever a service has
 * changed value:
 * \snippet include/hpd/hpd_adapter_api.h hpd_changed
 *
 * @startuml "Lifetime of request/response structures"
 *
 * participant Adapter as adp
 * participant "Request\nDispatch" as req
 * participant "Value" as val
 * entity "Request\nhpd_value_t" as req_val
 * entity "hpd_request_t" as req_t
 * entity "Response\nhpd_value_t" as res_val
 * entity "hpd_response_t" as res_t
 *
 * [-> req
 * activate req_val
 * activate req_t
 * activate req
 *
 * req -> adp: on_action()
 * activate adp
 *
 * adp -> req: hpd_request_get_service()
 * activate req
 * adp <-- req
 * deactivate req
 *
 * adp -> req: hpd_request_get_method()
 * activate req
 * adp <-- req
 * deactivate req
 *
 * adp -> req: hpd_request_get_value()
 * activate req
 * adp <-- req
 * deactivate req
 *
 * adp -> val: hpd_value_get_body()
 * activate val
 * adp <-- val
 * deactivate val
 *
 * adp -> val: hpd_value_get_header()
 * activate val
 * adp <-- val
 * deactivate val
 *
 * req <-- adp
 * deactivate adp
 *
 * [<-- req
 * deactivate req
 *
 * ... Later ...
 *
 * [-> adp
 * activate adp
 *
 * adp -> val: hpd_value_alloc()
 * activate val
 * val -> res_val: alloc()
 * activate res_val
 * adp <-- val
 * deactivate val
 *
 * adp -> val: hpd_value_set_header()
 * activate val
 * adp <-- val
 * deactivate val
 *
 * adp -> req: hpd_response_alloc()
 * activate req
 * req -> res_t: alloc()
 * activate res_t
 * req -> req_val: move()
 * destroy req_val
 * req -> req_t: move()
 * destroy req_t
 * adp <-- req
 * deactivate req
 *
 * adp -> req: hpd_response_set_value()
 * activate req
 * req -> res_val: move()
 * destroy res_val
 * adp <-- req
 * deactivate req
 *
 * adp -> req: hpd_respond()
 * activate req
 * req -> res_t: move()
 * destroy res_t
 * adp <-- req
 * deactivate req
 *
 * [<-- adp
 * deactivate adp
 *
 * @enduml
 *
 * @startuml "Lifetime of request/response structures"
 *
 * participant Adapter as adp
 * participant Discovery as dis
 * participant "Event\nDispatch" as ev
 * participant "Value" as val
 * entity "hpd_service_id_t" as sid
 * entity "hpd_value_t" as val_t
 *
 * [-> adp
 * activate adp
 *
 * adp -> dis: hpd_service_id_alloc()
 * activate dis
 * dis -> sid: alloc()
 * activate sid
 * adp <-- dis
 * deactivate dis
 *
 * adp -> val: hpd_value_alloc()
 * activate val
 * val -> val_t: alloc()
 * activate val_t
 * adp <-- val
 * deactivate val
 *
 * adp -> val: hpd_value_set_header()
 * activate val
 * adp <-- val
 * deactivate val
 *
 * adp -> ev: hpd_changed()
 * activate ev
 * ev -> sid: copy()
 * ev -> val_t: move()
 * destroy val_t
 * adp <-- ev
 * deactivate ev
 *
 * adp -> dis: hpd_service_id_free()
 * activate dis
 * dis -> sid: free()
 * destroy sid
 * adp <-- dis
 * deactivate dis
 *
 * [<-- adp
 * deactivate adp
 *
 * @enduml
 *
 * \subsection sec_api_application_api Application API - Communication
 *
 * The functions in the Application API are only available for applications.
 *
 * For hpd_request_t, hpd_response_t and hpd_listener_t functions we need the following callbacks:
 * \snippet include/hpd/hpd_types.h Application API Callbacks
 *
 * The functions for requests and response are the reverse of an adapter (an application can create requests and read
 * the values of a response):
 * \snippet include/hpd/hpd_application_api.h hpd_request_t functions
 * \snippet include/hpd/hpd_application_api.h hpd_response_t functions
 *
 * In addition, an application can also create listeners. Listeners can be created on any object (HomePort, adapter,
 * device, and service) and will be called for that object and everything below if the conditions are met. E.g., a
 * listener with a value callback on an adapter will be called if any service under that adapter changes value. Function
 * to manage listeners:
 * \snippet include/hpd/hpd_application_api.h hpd_listener_t functions
 *
 * The foreach function will cause the given listener to be called for each device that is already attached.
 *
 * @startuml "Lifetime of request/response structures"
 *
 * participant Application as app
 * participant Discovery as dis
 * participant "Request\nDispatch" as req
 * participant "Value" as val
 * entity "hpd_service_id_t" as sid
 * entity "Request\nhpd_value_t" as req_val
 * entity "hpd_request_t" as req_t
 * entity "Response\nhpd_value_t" as res_val
 * entity "hpd_response_t" as res_t
 *
 * [-> app
 * activate app
 *
 * app -> dis: hpd_service_id_alloc()
 * activate dis
 * dis -> sid: alloc()
 * activate sid
 * app <-- dis
 * deactivate dis
 *
 * app -> req: hpd_request_alloc()
 * activate req
 * req -> req_t: alloc()
 * activate req_t
 * req -> sid: copy()
 * app <-- req
 * deactivate req
 *
 * app -> dis: hpd_service_id_free()
 * activate dis
 * dis -> sid: free()
 * destroy sid
 * app <-- dis
 * deactivate dis
 *
 * app -> val: hpd_value_alloc()
 * activate val
 * val -> req_val: alloc()
 * activate req_val
 * app <-- val
 * deactivate val
 *
 * app -> val: hpd_value_set_header()
 * activate val
 * app <-- val
 * deactivate val
 *
 * app -> req: hpd_request_set_value()
 * activate req
 * req -> req_val: move()
 * destroy req_val
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_request_set_data()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_request()
 * activate req
 * req -> req_t: move()
 * destroy req_t
 * app <-- req
 * deactivate req
 *
 * [<-- app
 * deactivate app
 *
 * ... Later ...
 *
 * [-> req
 * activate req_val
 * activate req_t
 * activate res_val
 * activate res_t
 * activate req
 *
 * req -> app: on_response()
 * activate app
 *
 * app -> req: hpd_response_get_status()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_response_get_request_data()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_response_get_request_service()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_response_get_request_method()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_response_get_request_value()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> req: hpd_response_get_value()
 * activate req
 * app <-- req
 * deactivate req
 *
 * app -> val: hpd_value_get_body()
 * activate val
 * app <-- val
 * deactivate val
 *
 * app -> val: hpd_value_get_header()
 * activate val
 * app <-- val
 * deactivate val
 *
 * req <-- app
 * deactivate app
 *
 * req -> req_val: free()
 * destroy req_val
 * req -> req_t: free()
 * destroy req_t
 * req -> res_val: free()
 * destroy res_val
 * req -> res_t: free()
 * destroy res_t
 *
 * [<-- req
 * deactivate req
 *
 * @enduml
 *
 * @startuml "Lifetime of listener structures"
 *
 * participant Application as app
 * participant "Event Dispatch" as ev
 * entity hpd_listener_t as lt
 * entity hpd_device_id_t as dit
 * entity hpd_value_t as vt
 *
 * [-> app
 * activate app
 *
 * app -> ev: hpd_listener_alloc()
 * activate ev
 * ev -> lt: alloc()
 * activate lt
 * app <-- ev
 * deactivate ev
 *
 * app -> ev: hpd_listener_set_data()
 * activate ev
 * app <-- ev
 * deactivate ev
 *
 * app -> ev: hpd_listener_set_value_callback()
 * activate ev
 * app <-- ev
 * deactivate ev
 *
 * app -> ev: hpd_listener_set_device_callback()
 * activate ev
 * app <-- ev
 * deactivate ev
 *
 * app -> ev: hpd_subscribe()
 * activate ev
 * app <-- ev
 * deactivate ev
 *
 * app -> ev: hpd_foreach_attached()
 * activate ev
 * ev -> dit: alloc()
 * activate dit
 * ev -> app: on_attach()
 * activate app
 * ev <-- app
 * deactivate app
 * ev -> dit: free()
 * destroy dit
 * ev -> dit: alloc()
 * activate dit
 * ev -> app: on_attach()
 * activate app
 * ev <-- app
 * deactivate app
 * ev -> dit: free()
 * destroy dit
 * app <-- ev
 * deactivate ev
 *
 * [<-- app
 * deactivate app
 *
 * ... Later ...
 *
 * [-> ev
 * activate ev
 * activate dit
 *
 * ev -> app: on_attach()
 * activate app
 * ev <-- app
 * deactivate app
 *
 * ev -> dit: free()
 * destroy dit
 *
 * [<-- ev
 * deactivate ev
 *
 * ... Later ...
 *
 * [-> ev
 * activate ev
 * activate dit
 *
 * ev -> app: on_detach()
 * activate app
 * ev <-- app
 * deactivate app
 *
 * ev -> dit: free()
 * destroy dit
 *
 * [<-- ev
 * deactivate ev
 *
 * ... Later ...
 *
 * [-> ev
 * activate ev
 * activate vt
 *
 * ev -> app: on_change()
 * activate app
 * ev <-- app
 * deactivate app
 *
 * ev -> vt: free()
 * destroy vt
 *
 * [<-- ev
 * deactivate ev
 *
 * ... Later ...
 *
 * [-> app
 * activate app
 *
 * app -> ev: hpd_listener_free()
 * activate ev
 * ev -> lt: free()
 * destroy lt
 * app <-- ev
 * deactivate ev
 *
 * [<-- app
 * deactivate app
 *
 * @enduml
 *
 */
