/*
 * Copyright 2011 Aalborg University. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY Aalborg University ''AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Aalborg University OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 */

/*! \page tutorial02.dox Tutorial 02: Demo Example
 *
 * \tableofcontents
 *
 * \section sec_intro Introduction
 *
 * In this tutorial, we will cover the basic functions in hpd, which are needed in the main program, adapters, and
 * applications.
 *
 * The full files can be found in the example/demo folder, and can be compiled with `make example_demo`.
 *
 * \section sec_main Main Program
 *
 * The main program (demo_main.c) is pretty similar to that of the template example. Note, that we included the
 * hpd_rest webservice module, which are included and installed alongside hpd itself.
 *
 * \snippet demo_main.c file
 *
 * The hpd functionality used in this file:
 * - hpd_daemon_api.h: Header file containing all daemon related functions.
 * - hpd_rest.h: Header file containing the hpd_rest module.
 * - hpd_error_t: An error code and most functions in hpd returns, which should be checked for errors.
 * - hpd_t: The type of a hpd instance.
 * - hpd_alloc(): Allocates memory for hpd.
 * - hpd_module(): Adds a module to hpd. In this case we add three; hpd_rest, a demo adapter and a demo app(lication).
 * - hpd_start(): Starts and runs hpd.
 * - hpd_free(): Frees the memory allocated with hpd_alloc().
 *
 * \section sec_adapter Demo Adapter
 *
 * Here, we will create a simple adapter, that creates N virtual lamps, where N is a number given as command-line
 * argument. If N is not given we will create just one lamp as default.
 *
 * \subsection sec_adapter_header Header file
 *
 * As usual, the header file (demo_adapter.h) with only include a declaration of single hpd_module_def. Which describes
 * our module, and makes it easy to include in a main program when calling hpd_module().
 *
 * \snippet demo_adapter.h file
 *
 * \subsection sec_adapter_source Source file
 *
 * Our source file (demo_adapter.c) will use two header files.
 *
 * \snippet demo_adapter.c includes
 *
 * - hpd_adapter_api.h: All hpd functions required to make an adapter.
 * - hpd_common.h: A set of basic defines to ease simple tasks, such as memory allocation.
 *
 * We will need two struct of our own for this adapter:
 *
 * \snippet demo_adapter.c types
 *
 * - demo_adapter_t: Will be used to store global data for our adapter, such as the number of lamps. We also store the
 *                   unique id of the module (as given to hpd_module() in the main program), a reference to the adapter
 *                   and the context.
 * - demo_adapter_srv_t: Used to store data related to a single service in the adapter. This holds the current state
 *                       of the lamp and a pointer the global data.
 *
 * As in the template we provide the five functions and an instance of the module definition struct, as declared in the
 * header file:
 *
 * \snippet demo_adapter.c definition
 *
 * \subsubsection sec_adapter_source_functions Function Implementations
 *
 * The order of the functions here differs from the actual file (demo_adapter.c), so refer to the file if you need to
 * compile this example.
 *
 * \subsubsection sec_adapter_source_create_destroy on_create() and on_destroy()
 *
 * demo_adapter_on_create() first allocation the global memory and initialises it, then it add the support command-line
 * arguments to hpd:
 *
 * \snippet demo_adapter.c on_create
 *
 * New functionality introduced:
 * - HPD_CALLOC: Allocate memory (like calloc), but forces a null-check by using `goto alloc_error` (from hpd_common.h).
 * - hpd_module_get_id(): Get the id of your module, as provided to hpd_module().
 * - hpd_module_add_option(): Add a command-line option to hpd. The this the same arguments as you will provide to
 *                            struct argp_option when using argp.
 * - HPD_LOG_RETURN_E_ALLOC(): Logs a standard debug message and returns an HPD_E_ALLOC error.
 *
 * demo_adapter_on_destroy() frees this memory:
 *
 * \snippet demo_adapter.c on_destroy
 *
 * \subsubsection sec_adapter_source_parse_opt on_parse_opt()
 *
 * demo_adapter_on_parse_opt() checks for the argument we defined with hpd_module_add_option() earlier and sets
 * num_lamps accordingly. Recall that this function should return HPD_E_ARGUMENT, when the argument is not recognised.
 *
 * \snippet demo_adapter.c on_parse_opt
 *
 * \subsubsection sec_adapter_source_start_stop on_start() and on_stop()
 *
 * demo_adapter_on_start() creates the adapter object and the required number of lamps (we will make
 * demo_adapter_create_adapter() and demo_adapter_create_lamp() in a bit). On errors it stops everything again:
 *
 * \snippet demo_adapter.c on_start
 *
 * New functionality introduced:
 * - HPD_LOG_INFO(): Use to send log messages and has different versions: HPD_LOG_ERROR(), HPD_LOG_WARN(),
 *                   HPD_LOG_INFO(), HPD_LOG_DEBUG(), and HPD_LOG_VERBOSE().
 * - HPD_SPRINTF_ALLOC(): Works like sprintf, but allocates the required memory and actually uses snprintf instead,
 *                        it requires two labels for error handling; alloc_error and snprintf_error. (from
 *                        hpd_common.h)
 * - HPD_LOG_RETURN_E_SNPRINTF(): Can, like HPD_LOG_RETURN_E_ALLOC(), be used to log and return simple error messages,
 *                                in this case a HPD_E_UNKNOWN when snprintf fails.
 *
 * demo_adapter_on_stop() stops anything that was started during runtime. As we only created one adapter, we only have
 * to detach and free this - everything underneath it (devices, services, and parameters) will automatically be freed
 * by hpd:
 *
 * \snippet demo_adapter.c on_stop
 *
 * New functionality introduced:
 * - hpd_adapter_t: The type of an detached adapter.
 * - hpd_adapter_detach(): Detach an adapter with everything underneath, given by a id reference.
 * - hpd_adapter_free(): Frees the detached adapter and everything underneath it.
 * - hpd_adapter_id_free(): Frees the adapter id reference.
 *
 * \subsubsection sec_adapter_source_object_creation Object creation
 *
 * In demo_adapter_on_start() we called two functions; demo_adapter_create_adapter() and demo_adapter_create_lamp() to
 * create our object models, which we will implement now.
 *
 * First demo_adapter_create_adapter() allocates an adapter object, attaches it and creates an id reference to it. As
 * unique id we will use the module id, because we do not have better options and we are only making one adapter per
 * module.
 * 
 * \snippet demo_adapter.c create_adapter
 * 
 * New functionality introduced:
 * - hpd_adapter_id_alloc(): Allocate a new id reference. Not it is perfectly fine to do this, even when the adapter
 *                           object does not exist. We will however be getting HPD_E_NOT_FOUND if we tried to used it
 *                           for anything.
 * - hpd_adapter_alloc(): Allocate a new adapter object. Note, this may return HPD_E_NOT_UNIQUE, if the given id is not
 *                        globally unique. In this case the adapter will fail in such cases (by returning the error).
 * - hpd_adapter_set_attr(): Sets an attribute on the adapter, in this case we set the default type attribute
 *                           (HPD_ATTR_TYPE). If you have to set more than one attribute, you may prefer
 *                           hpd_adapter_set_attrs() instead that takes a variable number of arguments.
 * - hpd_adapter_attach(): Attach the adapter to hpd. Note that, after this the adapter instance of hpd_adapter_t, will
 *                         be invalid and can no longer be used. Use hpd_adapter_detach() to obtain it again.
 *                         
 * demo_adapter_create_lamp() create the device object and calls demo_adapter_create_service() to create the service
 * and parameter. Note that we are creating the service before attaching the device - unlike adapters, devices needs to
 * be attached with all their services and parameters already attached.
 * 
 * \snippet demo_adapter.c create_lamp
 * 
 * New functionality introduced:
 * - hpd_device_alloc(), hpd_device_set_attr(), hpd_device_attach(), hpd_device_free(): Like the equivalent functions
 *   for adapters.
 *   
 * demo_adapter_create_service() creates the service, the struct for our custom data for it, and calls 
 * demo_adapter_create_parameter() to create the parameter. We will create two callbacks demo_adapter_on_get() and
 * demo_adapter_on_put() later.
 * 
 * \snippet demo_adapter.c create_service
 * 
 * New functionality introduced:
 * - hpd_service_alloc(), hpd_service_attach(), and hpd_service_free(): Like the equivalent functions
 *   for devices and adapters.
 * - hpd_service_set_actions(): Set action on a service, we set both a HPD_M_GET and a HPD_M_PUT action. Here, we used
 *   the plural version for setting multiple at once, in which case HPD_M_NONE should always come last. If you only
 *   have to set one action, have a look at hpd_service_set_action().
 * - hpd_service_set_data(): Used to set custom data on a service, in this case an instance of demo_adapter_srv_t. The
 *   given on_free function will be used by hpd when this data needs to be freed later (can be NULL). In this case we
 *   used the standard C free() function.
 *   
 * demo_adapter_create_parameter() creates a new parameter object for our service:
 * 
 * \snippet demo_adapter.c create_parameter
 * 
 * New functionality introduced:
 * - hpd_parameter_alloc(), hpd_parameter_attach(), and hpd_parameter_free(): Like the equivalent functions
 *   for services, devices and adapters.
 *   
 * \subsubsection sec_adapter_source_actions Action Callbacks
 * 
 * demo_adapter_on_get() will send the current value of the lamp:
 * 
 * \snippet demo_adapter.c on_get
 * 
 * demo_adapter_on_put() will set the value of the lamp and then send the new current value:
 * 
 * \snippet demo_adapter.c on_put
 * 
 * New functionality introduced:
 * - hpd_status_t: Both functions returns hpd_status_t, which is a HTTP status code that will be sent to the requester.
 *   In cases where we handle sending the response later, we need to return HPD_S_NONE. Note that it is perfectly fine
 *   to keep the hpd_request_t pointer for use later, when we return HPD_S_NONE. However, we do commit to calling
 *   hpd_respond() some time later in those cases.
 *
 * \subsubsection sec_adapter_source_send_set Sending and Setting Values
 *
 * demo_adapter_send_value() sends a response to the requester with the current value:
 *
 * \snippet demo_adapter.c send
 *
 * New functionality introduced:
 * - hpd_response_t: The type of a response.
 * - hpd_response_alloc(): Allocate a new response instance.
 * - hpd_value_t: The type of a value.
 * - hpd_value_allocf(): One of several functions to allocate a new value instance. This one have similar behaviour as
 *   the printf family of functions.
 * - hpd_response_set_value(): Set the value of a response. After this, the value is no longer valid to use.
 * - hpd_respond(): Sends the response to the requester. After this, the response is no longer valid to use, and we
 *   have to return HPD_S_NONE, because to already responded to the request ourselves.
 * - hpd_value_free(): Frees a value.
 * - hpd_response_free(): Frees a response.
 *
 * demo_adapter_set_value() set the value of a lamp, which was store in the state field of demo_adapter_srv_t. To do so
 * we first have to retrieve the new value from the request and parse it from a string into an integer. If the value is
 * changed be call demo_adapter_send_changed() to send out an event.
 *
 * \snippet demo_adapter.c set
 *
 * New functionality introduced:
 * - hpd_request_get_value(): Get the value struct from a request.
 * - hpd_value_get_body(): Get the body of a value. Note that this is not '\\0'-terminated.
 * - hpd_request_get_service(): Get the service id reference of the service being requested.
 * - HPD_STR_N_CPY(): Like strncpy(), but allocates memory in the string first.
 *
 * demo_adapter_send_changed() sends out events that the value of changed to any possible listeners.
 *
 * \snippet demo_adapter.c changed
 *
 * New functionality introduced:
 * - hpd_changed(): Informs hpd that a service changed value. After this, the value is no longer valid to use.
 *
 */






















